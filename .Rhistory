library(phaseX)
devtools::load_all(".")
library(Rcpp)
devtools::load_all(".")
cwd
getwd()
getwd("..")
setwd("..")
setwd("~/Dropbox/Codes/project_sim_ml/packaging/phaseX/R")
library("phaseX")
devtools::load_all("~/Dropbox/Codes/project_sim_ml/packaging/phaseX")
phasespace
library(phaseX)
library(phaseX)
library(phaseX)
launch_PhaseExp()
Q
Q
library(phaseX)
library(phaseX)
library(phaseX)
library(phaseX)
shiny::runApp('inst/application')
file.info
file.info
file.info
temp.path <- sub(file.info$name,replacement = "",x = file.info$datapath)
temp.path
runApp('inst/application')
runApp('inst/application')
library(phaseX)
install.packages("devtools")
devtools::install_github("klutometis/roxygen")
library(phaseX)
install("phaseX")
library("devtools")
install("phaseX")
install("phaseX")
setwd("..")
create("phaseX")
library(phaseX)
library(phaseX)
shiny::runApp('inst/application')
library(phaseX)
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
temp.prm.names.init
temp.prm.names.addit
input$load_parameter_sets_ml
temp.idx
temp.range.name
temp.prm.combs <- get.init.prm.combs(phasespace$object,input$load_parameter_sets_ml[i], temp.range.name )
phenotype.values.selected.ml$DF
phenotype.loaded.ml$list
temp.name
input$load_parameter_sets_ml
nrow(prm.sets.selected.ml$original)
temp.ranges.names
names(unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
list %in% input$load_parameter_sets_ml
})))
get.addit.prm.combs.name(phasespace$object), function(list){
list %in% input$load_parameter_sets_ml
})
temp.ranges.names
input$load_parameter_sets_ml
lapply(get.addit.prm.combs.name(phasespace$object), function(list){
list %in% input$load_parameter_sets_ml
})
#temp.ranges.names<- append(temp.ranges.names, temp.ranges.names)
parameters <- as.character(unique(t(apply(t(temp.ranges.names),2, function(object, name ){ get.prm.ranges(object,name)[,"names"]}, object =  phasespace$object))))
parameters
names(unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
list %in% input$load_parameter_sets_ml
})))
get.init.prm.combs.name(phasespace$object) %in% input$load_parameter_sets_ml
temp <- get.addit.prm.combs.name(phasespace$object)
temp
temp$prm_ranges_IL2_transc_red_rand
temp$prm_ranges
class(temp$prm_ranges)
class(temp$prm_ranges_IL2_transc_red_rand)
unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
list %in% input$load_parameter_sets_ml
})))
unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
list %in% input$load_parameter_sets_ml
}))
lapply(get.addit.prm.combs.name(phasespace$object), function(list){
list %in% input$load_parameter_sets_ml
}))
lapply(get.addit.prm.combs.name(phasespace$object), function(list){
list %in% input$load_parameter_sets_ml
})
temp <- lapply(get.addit.prm.combs.name(phasespace$object), function(list){
list %in% input$load_parameter_sets_ml
})
temp
temp$prm_ranges
is.na(temp$prm_ranges)
length(temp$prm_range)
length(temp$prm_ranges_IL2_transc_red_rand)
temp.ranges.names <- c(temp.ranges.names,
get.prm.ranges.name(phasespace$object)[
unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
if(length(list %in% input$load_parameter_sets_ml) = 0){
FALSE
}else{
list %in% input$load_parameter_sets_ml
}
}))
]
)
temp.ranges.names <- c(temp.ranges.names,
get.prm.ranges.name(phasespace$object)[
unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
if(length(list %in% input$load_parameter_sets_ml) = 0){
FALSE
}else{
list %in% input$load_parameter_sets_ml
}
}))
]
)
unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
if(length(list %in% input$load_parameter_sets_ml) = 0){
FALSE
}else{
list %in% input$load_parameter_sets_ml
}
}))
unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
if(length(list %in% input$load_parameter_sets_ml) = 0){
FALSE
}else{
list %in% input$load_parameter_sets_ml
}
}))
lapply(get.addit.prm.combs.name(phasespace$object), function(list){
if(length(list %in% input$load_parameter_sets_ml) = 0){
FALSE
}else{
list %in% input$load_parameter_sets_ml
}
})
temp.ranges.names <- c(temp.ranges.names,
get.prm.ranges.name(phasespace$object)[
unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
if(length(list %in% input$load_parameter_sets_ml) == 0){
FALSE
}else{
list %in% input$load_parameter_sets_ml
}
}))
]
)
#temp.ranges.names <- get.prm.ranges.name(object = phasespace$object)
temp.ranges.names <- get.prm.ranges.name(phasespace$object)[get.init.prm.combs.name(phasespace$object) %in% input$load_parameter_sets_ml] #Nov 6 2019
temp.ranges.names
unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
if(length(list %in% input$load_parameter_sets_ml) == 0){
FALSE
}else{
list %in% input$load_parameter_sets_ml
}
}))
#temp.ranges.names <- get.prm.ranges.name(object = phasespace$object)
temp.ranges.names <- get.prm.ranges.name(phasespace$object)[get.init.prm.combs.name(phasespace$object) %in% input$load_parameter_sets_ml] #Nov 6 2019
temp.ranges.names <- c(temp.ranges.names,
get.prm.ranges.name(phasespace$object)[
unlist(lapply(get.addit.prm.combs.name(phasespace$object), function(list){
if(length(list %in% input$load_parameter_sets_ml) == 0){
FALSE
}else{
list %in% input$load_parameter_sets_ml
}
}))
]
)
temp.ranges.names <- unique(temp.ranges.names)
#temp.ranges.names<- append(temp.ranges.names, temp.ranges.names)
parameters <- as.character(unique(t(apply(t(temp.ranges.names),2, function(object, name ){ get.prm.ranges(object,name)[,"names"]}, object =  phasespace$object))))
parameters
#parameters <- get.prm.ranges(object = phasespace$object, name = names(unlist(get.init.prm.combs.name(phasespace$object))))[,"names"]
temp.prms <- get.custom.scale.prms(phasespace$object)
temp.prms
temp.prms <- unlist( temp.prms )
names(temp.prms) <- NULL
parameters <- append(parameters, temp.prms)
parameters
runApp('inst/application')
runApp('~/Dropbox/Codes/project_sim_ml/packaging/phaseX/inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
get.phenotypes.for.selected.prm.sets(object = phasespace$object, phenotypes = temp.phenotype.names, prm.sets = input$load_parameter_sets_ml )
temp.phenotype.names
n
for(i in 1:nrow(prm.ranges)){
if(prm.ranges$log.scale[i] == TRUE){
grids.temp = exp(log(prm.ranges$min[i]) + (log(prm.ranges$max[i])-log(prm.ranges$min[i]))/(prm.ranges$"number of grids"[i]-1)*(1:prm.ranges$"number of grids"[i]-1))
print(grids.temp)
prm.grids[i,c(1+1,max.num.grids+1)] = grids.temp[c(1,prm.ranges$"number of grids"[i])]
if(prm.ranges$"number of grids"[i] >2){
prm.grids[i,(2+1):(prm.ranges$"number of grids"[i])] = grids.temp[2:(prm.ranges$"number of grids"[i]-1)]
}
}else{
grids.temp = prm.ranges$min[i] + (prm.ranges$max[i]-prm.ranges$min[i])/(prm.ranges$"number of grids"[i]-1)*(1:prm.ranges$"number of grids"[i]-1)
prm.grids[i,c(1+1,max.num.grids+1)] = grids.temp[c(1,prm.ranges$"number of grids"[i])]
if(prm.ranges$"number of grids"[i] >2){
prm.grids[i,(2+1):(prm.ranges$"number of grids"[i])] = grids.temp[2:(prm.ranges$"number of grids"[i]-1)]
}
}
}
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
input$load_phenotype_ml
names(phenotype.values.selected.ml$DF)
n
runApp('inst/application')
input$load_phenotype_ml
runApp('inst/application')
load("~/Dropbox/Codes/project_tcell_activation/modeling/MAPPA_ntr0_ext_model_04052019/analysis/analysis.RData")
setwd("~/Dropbox/Codes/project_sim_ml/packaging/phaseX")
phen.adjusted.beta.half.IL2inj.premain.1pM.IL2_sec$diff.IL2_sec.max
phen.adjusted.beta.half.IL2inj.premain.1pM.IL2_sec$diff.IL2_sec.max <- phen.adjusted.beta.half.IL2inj.premain.1pM.IL2_sec$IL2_sec.max - phen.adjusted.IL2_sec$IL2_sec.max
phen.adjusted.beta.half.IL2inj.premain.1pM.IL2_sec$diff.IL2_sec.AUC <- phen.adjusted.beta.half.IL2inj.premain.1pM.IL2_sec$IL2_sec.AUC - phen.adjusted.IL2_sec$IL2_sec.AUC
phen.adjusted.beta.half.IL2inj.premain.1pM.IL2_sec$diff.IL2_sec.dur <- phen.adjusted.beta.half.IL2inj.premain.1pM.IL2_sec$IL2_sec.dur - phen.adjusted.IL2_sec$IL2_sec.dur
install.packages(c(‘shiny’, ‘shinydashboard’, ‘rhandsontable’, ‘shinyFiles’, ‘randtoolbox’, ‘lhs’, ‘randomForest’, ‘rgl’, ‘ggplot2’, ‘gplots’, ‘plot3D’, ‘DT’, ‘caret’ are not available for package ‘phaseX’))
install.packages(c('shiny', 'shinydashboard', 'rhandsontable', 'shinyFiles', 'randtoolbox', 'lhs', 'randomForest', 'rgl', 'ggplot2', 'gplots', 'plot3D', 'DT', 'caret')
)
install.packages("RcppArmadillo.h")
install.packages("RcppArmadillo")
library(RcppArmadillo)
Rcpp::sourceCpp('src/helloworld.cpp')
library(phaseX)
install.packages("gridExtra")
shiny::runApp('inst/application')
install.packages("devtools")
library(devtools)
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
getwd()
devtools::build_readme
devtools::build_readme()
shiny::runApp('inst/application')
library(phaseX)
runApp('inst/application')
runApp('inst/application')
runApp('~/Dropbox/Codes/project_sim_ml/packaging/phaseX/inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
